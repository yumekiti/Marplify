{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      // provider: 'sqlite',\n      // url: 'file:./keystone.db',\n      provider: 'postgresql',\n      url: 'postgres://user:password@db:5432/keystone',\n    },\n    lists,\n    session,\n  })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport { list } from '@keystone-6/core';\nimport { allowAll, denyAll } from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {\n  text,\n  relationship,\n  password,\n  timestamp,\n  select,\n} from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\nimport { document } from '@keystone-6/fields-document';\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type { Lists } from '.keystone/types';\n\nexport type Session = {\n  id: string\n  admin: boolean\n  moderator: null | { id: string }\n  contributor: null | { id: string }\n}\n\ntype Has<T, K extends keyof T> = {\n  [key in keyof T]: key extends K ? Exclude<T[key], null | undefined> : T[key];\n}\n\nfunction isAdmin<T extends Session> (session?: T): session is T & { admin: true } {\n  return session?.admin === true\n}\nfunction isModerator<T extends Session> (session?: T): session is Has<T, 'moderator'> {\n  return session?.moderator !== null\n}\nfunction isContributor<T extends Session> (session?: T): session is Has<T, 'contributor'> {\n  return session?.contributor !== null\n}\n\nfunction forUsers<T> ({\n  admin,\n  moderator,\n  contributor,\n  default: _default,\n}: {\n  admin?: ({ session }: { session: Session & { admin: true } }) => T\n  moderator?: ({ session }: { session: Has<Session, 'moderator'> }) => T\n  contributor?: ({ session }: { session: Has<Session, 'contributor'> }) => T\n  default: () => T\n}) {\n  return ({ session }: { session?: Session }): T => {\n    if (!session) return _default()\n    if (admin && isAdmin(session)) return admin({ session })\n    if (moderator && isModerator(session)) return moderator({ session })\n    if (contributor && isContributor(session)) return contributor({ session })\n    return _default()\n  }\n}\n\nconst adminOnly = forUsers({\n  admin: allowAll,\n  default: denyAll,\n})\n\nconst moderatorsOrAbove = forUsers({\n  admin: allowAll,\n  moderator: allowAll,\n  default: denyAll,\n})\n\nexport const lists: Lists = {\n  User: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // this is the fields for our User list\n    fields: {\n      // by adding isRequired, we enforce that every User should have a name\n      //   if no name is provided, an error will be displayed\n      name: text({ validation: { isRequired: true } }),\n\n      email: text({\n        validation: { isRequired: true },\n        // by adding isIndexed: 'unique', we're saying that no user can have the same\n        // email as another user - this may or may not be a good idea for your project\n        isIndexed: 'unique',\n      }),\n\n      password: password({ validation: { isRequired: true } }),\n\n      // we can use this field to see what Slides this User has authored\n      //   more on that in the Slide list below\n      slides: relationship({ ref: 'Slide.author', many: true }),\n\n      createdAt: timestamp({\n        // this sets the timestamp to Date.now() when the user is first created\n        defaultValue: { kind: 'now' },\n      }),\n    },\n  }),\n\n  Slide: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: {\n      operation: {\n        query: moderatorsOrAbove,\n        create: adminOnly,\n        update: moderatorsOrAbove,\n        delete: adminOnly,\n      }\n    },\n\n    // this is the fields for our Slide list\n    fields: {\n      title: text({ validation: { isRequired: true } }),\n\n      // the document field can be used for making rich editable content\n      //   you can find out more at https://keystonejs.com/docs/guides/document-fields\n      content: document({\n        formatting: true,\n        layouts: [\n          [1, 1],\n          [1, 1, 1],\n          [2, 1],\n          [1, 2],\n          [1, 2, 1],\n        ],\n        links: true,\n        dividers: true,\n      }),\n\n      // with this field, you can set a User as the author for a Slide\n      author: relationship({\n        // we could have used 'User', but then the relationship would only be 1-way\n        ref: 'User.slides',\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name', 'email'],\n          inlineEdit: { fields: ['name', 'email'] },\n          linkToItem: true,\n          inlineConnect: true,\n        },\n\n        // a Slide can only have one author\n        //   this is the default, but we show it here for verbosity\n        many: false,\n      }),\n\n      // with this field, you can add some Tags to Slides\n      tags: relationship({\n        // we could have used 'Tag', but then the relationship would only be 1-way\n        ref: 'Tag.slides',\n\n        // a Slide can have many Tags, not just one\n        many: true,\n\n        // this is some customisations for changing how this will look in the AdminUI\n        ui: {\n          displayMode: 'cards',\n          cardFields: ['name'],\n          inlineEdit: { fields: ['name'] },\n          linkToItem: true,\n          inlineConnect: true,\n          inlineCreate: { fields: ['name'] },\n        },\n      }),\n    },\n  }),\n\n  // this last list is our Tag list, it only has a name field for now\n  Tag: list({\n    // WARNING\n    //   for this starter project, anyone can create, query, update and delete anything\n    //   if you want to prevent random people on the internet from accessing your data,\n    //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n    access: allowAll,\n\n    // setting this to isHidden for the user interface prevents this list being visible in the Admin UI\n    ui: {\n      isHidden: true,\n    },\n\n    // this is the fields for our Tag list\n    fields: {\n      name: text(),\n      // this can be helpful to find out all the Slides associated with a Tag\n      slides: relationship({ ref: 'Slide.tags', many: true }),\n    },\n  }),\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "session"]
}
